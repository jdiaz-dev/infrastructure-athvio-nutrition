service: athvio-nutrition
frameworkVersion: "3"

provider:
  name: aws
  region: ${opt:stage, 'us-east-1'}
  stage: ${opt:stage, 'develop'}
  deploymentBucket:
    blockPublicAccess: true
  stackTags:
    shared-resource: "false"
    provider: aws

resources:
  Parameters:
    ComponentName:
      Type: String
      Default: athvio-nutrition
    RepositoryNameKeyManager:
      Type: String
      Default: jehova-solutions/athvio-nutrition
    ExecutionRoleKeyManagerName:
      Type: String
      Default: fargate-role-athvio-nutrition
    TargetGroupKeyManagerName2:
      Type: String
      Default: athvio-nutrition-tgr
    ServiceFamilyNameKeyManager:
      Type: String
      Default: service-athvio-nutrition
    ServiceNameKeyManager:
      Type: String
      Default: athvio-nutrition-service
    ContainerName:
      Type: String
      Default: application
    LoadBalancerPort2:
      Type: Number
      Description: Container port of app requiring LoadBalancer exposure
      Default: 56343
    AppContainerPort2:
      Type: Number
      Description: Container port of app requiring LoadBalancer exposure
      Default: 56343
    AppHostPort2:
      Type: Number
      Description: Host port of app requiring LoadBalancer exposure
      Default: 56343
  Conditions:
    IsNorthVirg:
      Fn::Equals:
        - ${aws:region}
        - us-east-1
  Resources:
    LoadBalancerAccessLogsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName:
          !Join ["", [!Ref ComponentName, "-elb-al-${sls:stage}-${aws:region}"]]
        BucketEncryption: !Ref "AWS::NoValue"
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        LoggingConfiguration:
          DestinationBucketName:
            !Join [
              "",
              [!Ref ComponentName, "-elb-al-${sls:stage}-${aws:region}"],
            ]
        LifecycleConfiguration:
          Rules:
            - Id: DeleteOldLogs
              Status: Enabled
              ExpirationInDays: 30

    LoadBalancerAccessLogsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref LoadBalancerAccessLogsBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: AllowELBWriteAccess
              Effect: Allow
              Principal:
                Service: "delivery.logs.amazonaws.com"
              Action: "s3:PutObject"
              Resource:
                !Join [
                  "",
                  ["arn:aws:s3:::", !Ref LoadBalancerAccessLogsBucket, "/*"],
                ]
            - Sid: AWSLogDeliveryAclCheck
              Effect: Allow
              Principal:
                Service: delivery.logs.amazonaws.com
              Action: s3:GetBucketAcl
              Resource: !GetAtt LoadBalancerAccessLogsBucket.Arn

    ExecutionTaskRoleAthvioNutrition:
      Type: AWS::IAM::Role
      Condition: IsNorthVirg
      Properties:
        RoleName: !Ref ExecutionRoleKeyManagerName
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ecs-tasks.amazonaws.com
                  - ecs.amazonaws.com
              Action: "sts:AssumeRole"

    TargetGroupAthvioNutrition:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: !Ref TargetGroupKeyManagerName2
        Port: !Ref AppContainerPort2
        HealthCheckPath: /ping
        HealthCheckPort: "56343"
        HealthCheckProtocol: HTTP
        Protocol: TCP
        TargetType: ip
        VpcId: !ImportValue athvioVpcId

    ListenerAthvioNutrition:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - TargetGroupArn: !Ref TargetGroupAthvioNutrition
            Type: forward
        LoadBalancerArn: !Ref LoadBalancerAthvioNutrition
        Port: !Ref LoadBalancerPort2
        Protocol: TCP

    LoadBalancerAthvioNutrition:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      DependsOn:
        - LoadBalancerAccessLogsBucket
        - LoadBalancerAccessLogsBucketPolicy
      Properties:
        Type: gateway
        Name: !Join ["", [!Ref ComponentName, "-lb"]]
        Scheme: internet-facing
        Subnets:
          - !ImportValue athvioPublicSubnetId
        LoadBalancerAttributes:
          - Key: access_logs.s3.enabled
            Value: "true"
          - Key: access_logs.s3.bucket
            Value: !Ref LoadBalancerAccessLogsBucket

    TaskDefinitionAthvioNutrition:
      Type: AWS::ECS::TaskDefinition
      Properties:
        Family: !Ref ServiceFamilyNameKeyManager
        NetworkMode: awsvpc
        ExecutionRoleArn:
          !Join [
            "",
            [
              "arn:aws:iam::${aws:accountId}:role/",
              !Ref ExecutionRoleKeyManagerName,
            ],
          ]
        TaskRoleArn:
          !Join [
            "",
            [
              "arn:aws:iam::${aws:accountId}:role/",
              !Ref ExecutionRoleKeyManagerName,
            ],
          ]
        Cpu: "256"
        Memory: "0.5GB"
        RequiresCompatibilities:
          - FARGATE
        ContainerDefinitions:
          - Name: !Ref ContainerName
            Image:
              !Join [
                "",
                [
                  "${aws:accountId}",
                  ".dkr.ecr.${aws:region}.amazonaws.com/",
                  !Ref RepositoryNameKeyManager,
                  ":xxxxxxxx-",
                  "${self:custom.image.${opt:stage}}",
                ],
              ]
            Environment:
              - Name: NODE_ENV
                Value: ${opt:stage}
              - Name: PORT
                Value: "56343"
            PortMappings:
              - ContainerPort: !Ref AppContainerPort2
                HostPort: !Ref AppHostPort2
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-region: ${aws:region}
                awslogs-group:
                  !Join [
                    "",
                    ["/ecs/logs-", !Ref ComponentName, "-${aws:region}"],
                  ]
                awslogs-create-group: "true"
                awslogs-stream-prefix: !Join ["", ["ecs-", !Ref ComponentName]]

    LogGroupAthvioNutrition:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName:
          !Join ["", ["/ecs/logs-", !Ref ComponentName, "-${aws:region}"]]
        RetentionInDays: 60

    ServiceAthvioNutrition:
      Type: AWS::ECS::Service
      DependsOn:
        - ListenerAthvioNutrition
      Properties:
        LaunchType: FARGATE
        DesiredCount: 1
        ServiceName: !Ref ServiceNameKeyManager
        Cluster: !ImportValue athvioClusterName
        TaskDefinition: !Ref TaskDefinitionAthvioNutrition
        NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: ENABLED
            Subnets:
              - !ImportValue athvioPublicSubnetId
            SecurityGroups:
              - !ImportValue athvioSecurityGroupId
        LoadBalancers:
          - ContainerName: !Ref ContainerName
            ContainerPort: !Ref AppContainerPort2
            TargetGroupArn: !Ref TargetGroupAthvioNutrition

    FargatePolicyAthvioNutrition:
      Type: AWS::IAM::Policy
      Condition: IsNorthVirg
      Properties:
        PolicyName: !Join ["", ["fargate-policy-", !Ref ComponentName]]
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "ecr:CompleteLayerUpload"
                - "ecr:DescribeRepositories"
                - "ecr:ListImages"
                - "ecr:DescribeImages"
                - "ecr:GetAuthorizationToken"
                - "ecr:GetDownloadUrlForLayer"
                - "ecr:GetLifecyclePolicy"
                - "logs:CreateLogStream"
                - "logs:DescribeLogStreams"
                - "logs:PutRetentionPolicy"
                - "logs:CreateLogGroup"
                - "logs:PutLogEvents"
                - "cloudwatch:*"
              Resource: "*"
        Roles:
          - !Ref ExecutionTaskRoleAthvioNutrition

custom:
  us-east-1: novi
  us-east-2: ohio
  serviceName: athvio-nutrition
  clusterName: athvio-cluster
  authorizer:
    develop: dev
    staging: stg
    testing: stg
    prodblue: prd
  environments:
    develop: dev
    staging: stg
    prodblue: prd
  image:
    develop: integration
    staging: staging
    prodblue: prodblue
